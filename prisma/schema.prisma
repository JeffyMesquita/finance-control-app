generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  image         String?
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  accounts      Account[]
  transactions  Transaction[]
  categories    Category[]
  accounts      FinancialAccount[]

  @@map("users")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model FinancialAccount {
  id            String        @id @default(cuid())
  name          String
  type          AccountType
  balance       Float         @default(0)
  currency      String        @default("USD")
  userId        String        @map("user_id")
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions  Transaction[]

  @@map("financial_accounts")
}

enum AccountType {
  BANK
  CREDIT_CARD
  CASH
  INVESTMENT
  OTHER
}

model Category {
  id            String        @id @default(cuid())
  name          String
  type          TransactionType
  icon          String?
  color         String?
  userId        String        @map("user_id")
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions  Transaction[]

  @@map("categories")
}

model Transaction {
  id                String          @id @default(cuid())
  amount            Float
  description       String
  date              DateTime
  type              TransactionType
  isRecurring       Boolean         @default(false) @map("is_recurring")
  recurringInterval String?         @map("recurring_interval")
  notes             String?
  receiptUrl        String?         @map("receipt_url")
  categoryId        String?         @map("category_id")
  accountId         String          @map("account_id")
  userId            String          @map("user_id")
  createdAt         DateTime        @default(now()) @map("created_at")
  updatedAt         DateTime        @updatedAt @map("updated_at")
  category          Category?       @relation(fields: [categoryId], references: [id])
  account           FinancialAccount @relation(fields: [accountId], references: [id])
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("transactions")
}

enum TransactionType {
  INCOME
  EXPENSE
}
